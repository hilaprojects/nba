// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: player_game.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlayerGameService_LogPlayerGame_FullMethodName       = "/pb.PlayerGameService/LogPlayerGame"
	PlayerGameService_GetPlayersGameStats_FullMethodName = "/pb.PlayerGameService/GetPlayersGameStats"
	PlayerGameService_GetTeamSeasonStats_FullMethodName  = "/pb.PlayerGameService/GetTeamSeasonStats"
)

// PlayerGameServiceClient is the client API for PlayerGameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerGameServiceClient interface {
	LogPlayerGame(ctx context.Context, in *LogPlayerGameRequest, opts ...grpc.CallOption) (*LogGameResponse, error)
	GetPlayersGameStats(ctx context.Context, in *GetPlayersGameStatsRequest, opts ...grpc.CallOption) (*PlayersGameStatsResponse, error)
	GetTeamSeasonStats(ctx context.Context, in *GetTeamsSeasonStatsRequest, opts ...grpc.CallOption) (*TeamsSeasonStatsResponse, error)
}

type playerGameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerGameServiceClient(cc grpc.ClientConnInterface) PlayerGameServiceClient {
	return &playerGameServiceClient{cc}
}

func (c *playerGameServiceClient) LogPlayerGame(ctx context.Context, in *LogPlayerGameRequest, opts ...grpc.CallOption) (*LogGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogGameResponse)
	err := c.cc.Invoke(ctx, PlayerGameService_LogPlayerGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerGameServiceClient) GetPlayersGameStats(ctx context.Context, in *GetPlayersGameStatsRequest, opts ...grpc.CallOption) (*PlayersGameStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayersGameStatsResponse)
	err := c.cc.Invoke(ctx, PlayerGameService_GetPlayersGameStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerGameServiceClient) GetTeamSeasonStats(ctx context.Context, in *GetTeamsSeasonStatsRequest, opts ...grpc.CallOption) (*TeamsSeasonStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsSeasonStatsResponse)
	err := c.cc.Invoke(ctx, PlayerGameService_GetTeamSeasonStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerGameServiceServer is the server API for PlayerGameService service.
// All implementations must embed UnimplementedPlayerGameServiceServer
// for forward compatibility.
type PlayerGameServiceServer interface {
	LogPlayerGame(context.Context, *LogPlayerGameRequest) (*LogGameResponse, error)
	GetPlayersGameStats(context.Context, *GetPlayersGameStatsRequest) (*PlayersGameStatsResponse, error)
	GetTeamSeasonStats(context.Context, *GetTeamsSeasonStatsRequest) (*TeamsSeasonStatsResponse, error)
	mustEmbedUnimplementedPlayerGameServiceServer()
}

// UnimplementedPlayerGameServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerGameServiceServer struct{}

func (UnimplementedPlayerGameServiceServer) LogPlayerGame(context.Context, *LogPlayerGameRequest) (*LogGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogPlayerGame not implemented")
}
func (UnimplementedPlayerGameServiceServer) GetPlayersGameStats(context.Context, *GetPlayersGameStatsRequest) (*PlayersGameStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayersGameStats not implemented")
}
func (UnimplementedPlayerGameServiceServer) GetTeamSeasonStats(context.Context, *GetTeamsSeasonStatsRequest) (*TeamsSeasonStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamSeasonStats not implemented")
}
func (UnimplementedPlayerGameServiceServer) mustEmbedUnimplementedPlayerGameServiceServer() {}
func (UnimplementedPlayerGameServiceServer) testEmbeddedByValue()                           {}

// UnsafePlayerGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerGameServiceServer will
// result in compilation errors.
type UnsafePlayerGameServiceServer interface {
	mustEmbedUnimplementedPlayerGameServiceServer()
}

func RegisterPlayerGameServiceServer(s grpc.ServiceRegistrar, srv PlayerGameServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlayerGameServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayerGameService_ServiceDesc, srv)
}

func _PlayerGameService_LogPlayerGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogPlayerGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerGameServiceServer).LogPlayerGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerGameService_LogPlayerGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerGameServiceServer).LogPlayerGame(ctx, req.(*LogPlayerGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerGameService_GetPlayersGameStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayersGameStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerGameServiceServer).GetPlayersGameStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerGameService_GetPlayersGameStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerGameServiceServer).GetPlayersGameStats(ctx, req.(*GetPlayersGameStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerGameService_GetTeamSeasonStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsSeasonStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerGameServiceServer).GetTeamSeasonStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerGameService_GetTeamSeasonStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerGameServiceServer).GetTeamSeasonStats(ctx, req.(*GetTeamsSeasonStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerGameService_ServiceDesc is the grpc.ServiceDesc for PlayerGameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerGameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PlayerGameService",
	HandlerType: (*PlayerGameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogPlayerGame",
			Handler:    _PlayerGameService_LogPlayerGame_Handler,
		},
		{
			MethodName: "GetPlayersGameStats",
			Handler:    _PlayerGameService_GetPlayersGameStats_Handler,
		},
		{
			MethodName: "GetTeamSeasonStats",
			Handler:    _PlayerGameService_GetTeamSeasonStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player_game.proto",
}
